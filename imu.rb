# This file accepts IMU data file generated by SenseHat as input,
# tries to convert it in human understandable form.
# Gyroscope data is converted to unit of Degrees per Seconds,
# which is nothing but the angular velocity of the object.
# Accelerometer data is converted to usable angles which can be used
# for inclination angles.
# Compass data is used to get the heading and direction of the object.

# IMU class is a parent class which captures the data from IMU file
class IMU
  def initialize(input_file)
    @file = input_file
  end

  # capture_data reads the desired lines from IMU data file and coma
  # seperated data is stored in sensor lines.
  def capture_data(sensor_name)
    @file.readlines.each do |line|
      next unless line.match(sensor_name)
      sensor_lines = line.split(', ')
      capture_raw(sensor_lines)
    end
  end

  # capture_raw captures x, y, z axis value and converts it to float values
  def capture_raw(sensor_lines)
    for i in 0...sensor_lines.length
      inner_sensor_lines = sensor_lines[i].split
      if i.zero?
        @raw_x = inner_sensor_lines[inner_sensor_lines.length - 1].to_f
      elsif i == 1
        @raw_y = inner_sensor_lines[inner_sensor_lines.length - 1].to_f
      elsif i == 2
        @raw_z = inner_sensor_lines[inner_sensor_lines.length - 1].to_f
      end
    end
    conversion
  end
end

# Gyroscope is inherited class from parent class IMU which converts
# gyroscope values into degrees per second
class Gyroscope < IMU
  def initialize(file)
    super(file)
  end

  def conversion
    gyro_x = @raw_x * 0.07
    gyro_y = @raw_y * 0.07
    gyro_z = @raw_z * 0.07
    puts "X = #{gyro_x}  Y = #{gyro_y}  Z = #{gyro_z}"
  end
end

# Accelerometer is an inhereted class from parent class IMU which converts
# accelerometer values and gives the inclination angle of the object
class Accelerometer < IMU
  RAD_TO_DEG = 57.29578
  def initialize(file)
    super(file)
  end

  def conversion
    acc_x_angle = (Math.atan2(@raw_y, @raw_z) + Math::PI) * RAD_TO_DEG
    acc_y_angle = (Math.atan2(@raw_z, @raw_x) + Math::PI) * RAD_TO_DEG

    acc_x_angle -= 180.0

    if acc_y_angle > 90.0
      acc_y_angle -= 270.0
    else
      acc_y_angle += 90.0
    end

    puts "X-Angle: #{acc_x_angle}\tY-Angle: #{acc_y_angle}"
  end
end

# Compass is an inhereted class from parent class IMU which converts
# compass values and gives the Heading and direction of the object
class Compass < IMU
  def initialize(file)
    super(file)
  end

  def conversion
    heading = (Math.atan2(@raw_y, @raw_x) * 180) / Math::PI
    if heading < 0 then heading += 360 end
    compute_direction(heading)
  end # end of function

  def compute_direction(heading)
    if heading > 68 && heading < 113 then dirn = 'East'
    elsif heading > 248 && heading < 293 then dirn = 'West'
    elsif heading > 338 || heading < 23 then dirn = 'North'
    elsif heading > 158 && heading < 203 then dirn = 'South'
    elsif heading > 23 && heading < 68 then dirn = 'North-East'
    elsif heading > 112 && heading < 158 then dirn = 'South-East'
    elsif heading > 203 && heading < 248 then dirn = 'South-West'
    elsif heading > 293 && heading < 338 then dirn = 'North-West'
    end # end of if
    print "heading = #{heading}\tdir = #{dirn} \n"
  end # end of function
end

# Main
file = File.new('data_imu.txt', 'r')
puts 'Which data you want to see?\n1. Gyroscope\n2. Accelerometer\n3. Compass'
puts 'Enter 1,2 or 3:'
choice = gets.chomp
case choice
when '1'
  g = Gyroscope.new(file)
  g.capture_data('gyro:')
when '2'
  a = Accelerometer.new(file)
  a.capture_data('accelo:')
when '3'
  c = Compass.new(file)
  c.capture_data('compass:')
end

file.close
